Metadata-Version: 2.4
Name: reactit
Version: 0.0.1
Summary: iterating possible reactions from a given set of compounds
Author-email: "Benjamin A. D. Williamson" <benjamin.williamson@ntnu.no>
License: BSD-3
Project-URL: repository, https://github.com/badw/reactit.git
Project-URL: changelog, https://github.com/badw/reactit/tree/main/CHANGELOG.md
Keywords: Chemistry,Organic Chemistry,Reactions,Materials Science
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Science/Research
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Intended Audience :: Science/Research
Classifier: Topic :: Scientific/Engineering
Classifier: Operating System :: Microsoft :: Windows
Classifier: Operating System :: Unix
Classifier: Operating System :: MacOS
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: numpy
Requires-Dist: tqdm
Requires-Dist: sympy
Requires-Dist: pytest
Provides-Extra: dev
Requires-Dist: pytest>=7.4.0; extra == "dev"
Requires-Dist: pytest-cov>=3.0.0; extra == "dev"

[![Tests](https://github.com/badw/reactit/actions/workflows/tests.yml/badge.svg)](https://github.com/badw/reactit/actions/workflows/tests.yml)




## `reactit` -  **React**ion **It**erator <img src="./static/reactit.png" width="300" align="right" alt="Generated by ChatGPT">

`reactit` is a code for generating all possible reactions between species in an efficient manner.


### Installation 

```
git clone https://github.com/badw/reactit.git 
cd reactit 
pip install . 
```

### Examples 

an example Jupyter Notebook can be found here: 


`./examples/reactit.ipynb`


simple usage: 

```
from reactit import ReactionGenerator

rg = ReactionGenerator( compounds = {0:'CO2',1:'H2O',2:'H2',3:'CO'} )
reactions = rg.iterate(max_length=4)

reactions
```

> ['1 CO2 + 1 H2 = 1 H2O + 1 CO']


#### `chempy`, `pymatgen` and `networkx` support 

support for [https://github.com/bjodah/chempy.git](chempy) `Equilibrium` and [https://github.com/materialsproject/pymatgen.git](pymatgen) `BalancedReaction` objects are included: 

##### `chempy`
```
chempy_reactions = rg.to_chempy()
chempy_reactions[0]
```
> Equilibrium(CO2 + H2 â†” CO + H2O)


##### `pymatgen`
```
pymatgen_reactions = rg.to_pymatgen()
pymatgen_reactions[0]
```
> BalancedReaction(H2 + CO2 -> H2O + CO)



##### `networkx`
```
G = rg.to_networkx_graph()

import networkx as nx 

node_colours= []
node_sizes = []
for node in list(G.nodes):
    if isinstance(node,int):
        node_colours.append('red')
        node_sizes.append(25)
    else:
        node_colours.append('blue')
        node_sizes.append(100)

nx.draw_random(G,node_color=node_colours,node_size=node_sizes,width=0.1)
```
<img src="./static/networkx.png" width="300" align="left" alt="networkx graph generated from reactit">

---

#### Todo: 
- [ ] ability to pass `SMILES` strings to form `SMILES` equations 
- [ ] multiprocessing for particularly large reaction sets
- [ ] save to file 
- [ ] `CLI`
